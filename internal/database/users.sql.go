// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
)

const changeEmailPassword = `-- name: ChangeEmailPassword :exec
update users
set email = $1,
hashed_password = $2
where id = $3
`

type ChangeEmailPasswordParams struct {
	Email          string
	HashedPassword string
	ID             string
}

func (q *Queries) ChangeEmailPassword(ctx context.Context, arg ChangeEmailPasswordParams) error {
	_, err := q.db.ExecContext(ctx, changeEmailPassword, arg.Email, arg.HashedPassword, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, hashed_password, updated_at, created_at)
VALUES (gen_random_uuid(), $1, $2, NOW(), NOW())
RETURNING id, email, created_at, updated_at, hashed_password
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const getPassword = `-- name: GetPassword :one
select hashed_password from users where email = $1
`

func (q *Queries) GetPassword(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPassword, email)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, created_at, updated_at, hashed_password FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const resetUsersTable = `-- name: ResetUsersTable :exec
DELETE FROM users
`

func (q *Queries) ResetUsersTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsersTable)
	return err
}
